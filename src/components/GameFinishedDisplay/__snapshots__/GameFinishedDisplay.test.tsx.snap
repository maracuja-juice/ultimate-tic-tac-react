// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GameFinished should match snapshot when circle wins 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GameFinishedDisplay
    isGameFinished={true}
    restartGame={[Function]}
    winner={1}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <div
          className="restart-alignment visible"
        >
          <p
            className="winner-text"
          >
            <UNDEFINED>
              <OSymbol
                shouldAnimate={false}
                style={
                  Object {
                    "fontSize": "5vmin",
                  }
                }
              />
               wins!
            </UNDEFINED>
          </p>
          <Button
            dense={true}
            onClick={[Function]}
            raised={true}
            stroked={false}
            unelevated={false}
          >
            Play Again
          </Button>
        </div>,
        <div
          className="center"
        >
          <Confetti
            active={true}
            config={
              Object {
                "decay": 0.97,
                "elementCount": 250,
                "spread": 360,
                "startVelocity": 35,
              }
            }
          />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p
              className="winner-text"
            >
              <UNDEFINED>
                <OSymbol
                  shouldAnimate={false}
                  style={
                    Object {
                      "fontSize": "5vmin",
                    }
                  }
                />
                 wins!
              </UNDEFINED>
            </p>,
            <Button
              dense={true}
              onClick={[Function]}
              raised={true}
              stroked={false}
              unelevated={false}
            >
              Play Again
            </Button>,
          ],
          "className": "restart-alignment visible",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <UNDEFINED>
                <OSymbol
                  shouldAnimate={false}
                  style={
                    Object {
                      "fontSize": "5vmin",
                    }
                  }
                />
                 wins!
              </UNDEFINED>,
              "className": "winner-text",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <OSymbol
                    shouldAnimate={false}
                    style={
                      Object {
                        "fontSize": "5vmin",
                      }
                    }
                  />,
                  " wins!",
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "shouldAnimate": false,
                    "style": Object {
                      "fontSize": "5vmin",
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                " wins!",
              ],
              "type": Symbol(react.fragment),
            },
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Play Again",
              "dense": true,
              "onClick": [Function],
              "raised": true,
              "stroked": false,
              "unelevated": false,
            },
            "ref": null,
            "rendered": "Play Again",
            "type": [Function],
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Confetti
            active={true}
            config={
              Object {
                "decay": 0.97,
                "elementCount": 250,
                "spread": 360,
                "startVelocity": 35,
              }
            }
          />,
          "className": "center",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "active": true,
            "config": Object {
              "decay": 0.97,
              "elementCount": 250,
              "spread": 360,
              "startVelocity": 35,
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <div
            className="restart-alignment visible"
          >
            <p
              className="winner-text"
            >
              <UNDEFINED>
                <OSymbol
                  shouldAnimate={false}
                  style={
                    Object {
                      "fontSize": "5vmin",
                    }
                  }
                />
                 wins!
              </UNDEFINED>
            </p>
            <Button
              dense={true}
              onClick={[Function]}
              raised={true}
              stroked={false}
              unelevated={false}
            >
              Play Again
            </Button>
          </div>,
          <div
            className="center"
          >
            <Confetti
              active={true}
              config={
                Object {
                  "decay": 0.97,
                  "elementCount": 250,
                  "spread": 360,
                  "startVelocity": 35,
                }
              }
            />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p
                className="winner-text"
              >
                <UNDEFINED>
                  <OSymbol
                    shouldAnimate={false}
                    style={
                      Object {
                        "fontSize": "5vmin",
                      }
                    }
                  />
                   wins!
                </UNDEFINED>
              </p>,
              <Button
                dense={true}
                onClick={[Function]}
                raised={true}
                stroked={false}
                unelevated={false}
              >
                Play Again
              </Button>,
            ],
            "className": "restart-alignment visible",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <UNDEFINED>
                  <OSymbol
                    shouldAnimate={false}
                    style={
                      Object {
                        "fontSize": "5vmin",
                      }
                    }
                  />
                   wins!
                </UNDEFINED>,
                "className": "winner-text",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <OSymbol
                      shouldAnimate={false}
                      style={
                        Object {
                          "fontSize": "5vmin",
                        }
                      }
                    />,
                    " wins!",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "shouldAnimate": false,
                      "style": Object {
                        "fontSize": "5vmin",
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  " wins!",
                ],
                "type": Symbol(react.fragment),
              },
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Play Again",
                "dense": true,
                "onClick": [Function],
                "raised": true,
                "stroked": false,
                "unelevated": false,
              },
              "ref": null,
              "rendered": "Play Again",
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Confetti
              active={true}
              config={
                Object {
                  "decay": 0.97,
                  "elementCount": 250,
                  "spread": 360,
                  "startVelocity": 35,
                }
              }
            />,
            "className": "center",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": true,
              "config": Object {
                "decay": 0.97,
                "elementCount": 250,
                "spread": 360,
                "startVelocity": 35,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`GameFinished should match snapshot when cross wins 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GameFinishedDisplay
    isGameFinished={true}
    restartGame={[Function]}
    winner={0}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <div
          className="restart-alignment visible"
        >
          <p
            className="winner-text"
          >
            <UNDEFINED>
              <XSymbol
                shouldAnimate={false}
                style={
                  Object {
                    "fontSize": "5vmin",
                  }
                }
              />
               wins!
            </UNDEFINED>
          </p>
          <Button
            dense={true}
            onClick={[Function]}
            raised={true}
            stroked={false}
            unelevated={false}
          >
            Play Again
          </Button>
        </div>,
        <div
          className="center"
        >
          <Confetti
            active={true}
            config={
              Object {
                "decay": 0.97,
                "elementCount": 250,
                "spread": 360,
                "startVelocity": 35,
              }
            }
          />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p
              className="winner-text"
            >
              <UNDEFINED>
                <XSymbol
                  shouldAnimate={false}
                  style={
                    Object {
                      "fontSize": "5vmin",
                    }
                  }
                />
                 wins!
              </UNDEFINED>
            </p>,
            <Button
              dense={true}
              onClick={[Function]}
              raised={true}
              stroked={false}
              unelevated={false}
            >
              Play Again
            </Button>,
          ],
          "className": "restart-alignment visible",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <UNDEFINED>
                <XSymbol
                  shouldAnimate={false}
                  style={
                    Object {
                      "fontSize": "5vmin",
                    }
                  }
                />
                 wins!
              </UNDEFINED>,
              "className": "winner-text",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <XSymbol
                    shouldAnimate={false}
                    style={
                      Object {
                        "fontSize": "5vmin",
                      }
                    }
                  />,
                  " wins!",
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "shouldAnimate": false,
                    "style": Object {
                      "fontSize": "5vmin",
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                " wins!",
              ],
              "type": Symbol(react.fragment),
            },
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Play Again",
              "dense": true,
              "onClick": [Function],
              "raised": true,
              "stroked": false,
              "unelevated": false,
            },
            "ref": null,
            "rendered": "Play Again",
            "type": [Function],
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Confetti
            active={true}
            config={
              Object {
                "decay": 0.97,
                "elementCount": 250,
                "spread": 360,
                "startVelocity": 35,
              }
            }
          />,
          "className": "center",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "active": true,
            "config": Object {
              "decay": 0.97,
              "elementCount": 250,
              "spread": 360,
              "startVelocity": 35,
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <div
            className="restart-alignment visible"
          >
            <p
              className="winner-text"
            >
              <UNDEFINED>
                <XSymbol
                  shouldAnimate={false}
                  style={
                    Object {
                      "fontSize": "5vmin",
                    }
                  }
                />
                 wins!
              </UNDEFINED>
            </p>
            <Button
              dense={true}
              onClick={[Function]}
              raised={true}
              stroked={false}
              unelevated={false}
            >
              Play Again
            </Button>
          </div>,
          <div
            className="center"
          >
            <Confetti
              active={true}
              config={
                Object {
                  "decay": 0.97,
                  "elementCount": 250,
                  "spread": 360,
                  "startVelocity": 35,
                }
              }
            />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p
                className="winner-text"
              >
                <UNDEFINED>
                  <XSymbol
                    shouldAnimate={false}
                    style={
                      Object {
                        "fontSize": "5vmin",
                      }
                    }
                  />
                   wins!
                </UNDEFINED>
              </p>,
              <Button
                dense={true}
                onClick={[Function]}
                raised={true}
                stroked={false}
                unelevated={false}
              >
                Play Again
              </Button>,
            ],
            "className": "restart-alignment visible",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <UNDEFINED>
                  <XSymbol
                    shouldAnimate={false}
                    style={
                      Object {
                        "fontSize": "5vmin",
                      }
                    }
                  />
                   wins!
                </UNDEFINED>,
                "className": "winner-text",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    <XSymbol
                      shouldAnimate={false}
                      style={
                        Object {
                          "fontSize": "5vmin",
                        }
                      }
                    />,
                    " wins!",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "shouldAnimate": false,
                      "style": Object {
                        "fontSize": "5vmin",
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  " wins!",
                ],
                "type": Symbol(react.fragment),
              },
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Play Again",
                "dense": true,
                "onClick": [Function],
                "raised": true,
                "stroked": false,
                "unelevated": false,
              },
              "ref": null,
              "rendered": "Play Again",
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Confetti
              active={true}
              config={
                Object {
                  "decay": 0.97,
                  "elementCount": 250,
                  "spread": 360,
                  "startVelocity": 35,
                }
              }
            />,
            "className": "center",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": true,
              "config": Object {
                "decay": 0.97,
                "elementCount": 250,
                "spread": 360,
                "startVelocity": 35,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`GameFinished should match snapshot when draw 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GameFinishedDisplay
    isGameFinished={true}
    restartGame={[Function]}
    winner={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <div
          className="restart-alignment visible"
        >
          <p
            className="winner-text"
          >
            It's a draw!
          </p>
          <Button
            dense={true}
            onClick={[Function]}
            raised={true}
            stroked={false}
            unelevated={false}
          >
            Play Again
          </Button>
        </div>,
        <div
          className="center"
        >
          <Confetti
            active={true}
            config={
              Object {
                "decay": 0.97,
                "elementCount": 250,
                "spread": 360,
                "startVelocity": 35,
              }
            }
          />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p
              className="winner-text"
            >
              It's a draw!
            </p>,
            <Button
              dense={true}
              onClick={[Function]}
              raised={true}
              stroked={false}
              unelevated={false}
            >
              Play Again
            </Button>,
          ],
          "className": "restart-alignment visible",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "It's a draw!",
              "className": "winner-text",
            },
            "ref": null,
            "rendered": "It's a draw!",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Play Again",
              "dense": true,
              "onClick": [Function],
              "raised": true,
              "stroked": false,
              "unelevated": false,
            },
            "ref": null,
            "rendered": "Play Again",
            "type": [Function],
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Confetti
            active={true}
            config={
              Object {
                "decay": 0.97,
                "elementCount": 250,
                "spread": 360,
                "startVelocity": 35,
              }
            }
          />,
          "className": "center",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "active": true,
            "config": Object {
              "decay": 0.97,
              "elementCount": 250,
              "spread": 360,
              "startVelocity": 35,
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <div
            className="restart-alignment visible"
          >
            <p
              className="winner-text"
            >
              It's a draw!
            </p>
            <Button
              dense={true}
              onClick={[Function]}
              raised={true}
              stroked={false}
              unelevated={false}
            >
              Play Again
            </Button>
          </div>,
          <div
            className="center"
          >
            <Confetti
              active={true}
              config={
                Object {
                  "decay": 0.97,
                  "elementCount": 250,
                  "spread": 360,
                  "startVelocity": 35,
                }
              }
            />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p
                className="winner-text"
              >
                It's a draw!
              </p>,
              <Button
                dense={true}
                onClick={[Function]}
                raised={true}
                stroked={false}
                unelevated={false}
              >
                Play Again
              </Button>,
            ],
            "className": "restart-alignment visible",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "It's a draw!",
                "className": "winner-text",
              },
              "ref": null,
              "rendered": "It's a draw!",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Play Again",
                "dense": true,
                "onClick": [Function],
                "raised": true,
                "stroked": false,
                "unelevated": false,
              },
              "ref": null,
              "rendered": "Play Again",
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Confetti
              active={true}
              config={
                Object {
                  "decay": 0.97,
                  "elementCount": 250,
                  "spread": 360,
                  "startVelocity": 35,
                }
              }
            />,
            "className": "center",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": true,
              "config": Object {
                "decay": 0.97,
                "elementCount": 250,
                "spread": 360,
                "startVelocity": 35,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`GameFinished should match snapshot when no one wins 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <GameFinishedDisplay
    isGameFinished={false}
    restartGame={[Function]}
    winner={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <div
          className="restart-alignment hidden"
        >
          <p
            className="winner-text"
          >
            reservation
          </p>
          <Button
            dense={true}
            onClick={[Function]}
            raised={true}
            stroked={false}
            unelevated={false}
          >
            Play Again
          </Button>
        </div>,
        <div
          className="center"
        >
          <Confetti
            active={false}
            config={
              Object {
                "decay": 0.97,
                "elementCount": 250,
                "spread": 360,
                "startVelocity": 35,
              }
            }
          />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <p
              className="winner-text"
            >
              reservation
            </p>,
            <Button
              dense={true}
              onClick={[Function]}
              raised={true}
              stroked={false}
              unelevated={false}
            >
              Play Again
            </Button>,
          ],
          "className": "restart-alignment hidden",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "reservation",
              "className": "winner-text",
            },
            "ref": null,
            "rendered": "reservation",
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Play Again",
              "dense": true,
              "onClick": [Function],
              "raised": true,
              "stroked": false,
              "unelevated": false,
            },
            "ref": null,
            "rendered": "Play Again",
            "type": [Function],
          },
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Confetti
            active={false}
            config={
              Object {
                "decay": 0.97,
                "elementCount": 250,
                "spread": 360,
                "startVelocity": 35,
              }
            }
          />,
          "className": "center",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "active": false,
            "config": Object {
              "decay": 0.97,
              "elementCount": 250,
              "spread": 360,
              "startVelocity": 35,
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <div
            className="restart-alignment hidden"
          >
            <p
              className="winner-text"
            >
              reservation
            </p>
            <Button
              dense={true}
              onClick={[Function]}
              raised={true}
              stroked={false}
              unelevated={false}
            >
              Play Again
            </Button>
          </div>,
          <div
            className="center"
          >
            <Confetti
              active={false}
              config={
                Object {
                  "decay": 0.97,
                  "elementCount": 250,
                  "spread": 360,
                  "startVelocity": 35,
                }
              }
            />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p
                className="winner-text"
              >
                reservation
              </p>,
              <Button
                dense={true}
                onClick={[Function]}
                raised={true}
                stroked={false}
                unelevated={false}
              >
                Play Again
              </Button>,
            ],
            "className": "restart-alignment hidden",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "reservation",
                "className": "winner-text",
              },
              "ref": null,
              "rendered": "reservation",
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Play Again",
                "dense": true,
                "onClick": [Function],
                "raised": true,
                "stroked": false,
                "unelevated": false,
              },
              "ref": null,
              "rendered": "Play Again",
              "type": [Function],
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Confetti
              active={false}
              config={
                Object {
                  "decay": 0.97,
                  "elementCount": 250,
                  "spread": 360,
                  "startVelocity": 35,
                }
              }
            />,
            "className": "center",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "active": false,
              "config": Object {
                "decay": 0.97,
                "elementCount": 250,
                "spread": 360,
                "startVelocity": 35,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
